
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#define MAX_PROCESSES 100


typedef struct {
    int id;
    int burst_time;
    int waiting_time;
    int turnaround_time;
    int priority; // For priority scheduling
} Process;


void calculateWaitingTimeFCFS(Process processes[], int n) {
    processes[0].waiting_time = 0;
    for (int i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
    }
}


void calculateWaitingTimeSJF(Process processes[], int n) {
    // Sort processes by burst time
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].burst_time > processes[j + 1].burst_time) {
                Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
    calculateWaitingTimeFCFS(processes, n);
}


void calculateWaitingTimeRR(Process processes[], int n, int quantum) {
    int remaining_time[MAX_PROCESSES];
    for (int i = 0; i < n; i++) {
        remaining_time[i] = processes[i].burst_time;
    }


    int t = 0;
    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (remaining_time[i] > 0) {
                done = 0;
                if (remaining_time[i] > quantum) {
                    t += quantum;
                    remaining_time[i] -= quantum;
                } else {
                    t = t + remaining_time[i];
                    processes[i].waiting_time = t - processes[i].burst_time;
                    remaining_time[i] = 0;
                }
            }
        }
        if (done == 1) break;
    }
}


void calculateWaitingTimePriority(Process processes[], int n) {
    // Sort processes by priority
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
    calculateWaitingTimeFCFS(processes, n);
}


void calculateAverageWaitingTime(Process processes[], int n) {
    float total_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
    }
    printf("Average Waiting Time: %.2f\n", total_waiting_time / n);
}


void printGanttChart(Process processes[], int n) {
    printf("Gantt Chart:\n|");
    for (int i = 0; i < n; i++) {
        printf(" P%d |", processes[i].id);
    }
    printf("\n");
}


void menu() {
    printf("CPU Scheduling Algorithm Simulator\n");
    printf("1. First-Come, First-Served (FCFS)\n");
    printf("2. Shortest Job First (SJF)\n");
    printf("3. Round Robin (RR)\n");
    printf("4. Priority Scheduling\n");
    printf("5. Exit\n");
}


int main() {
    Process processes[MAX_PROCESSES];
    int n, choice, quantum;


    while (1) {
        menu();
        printf("Select an option: ");
        scanf("%d", &choice);


        if (choice == 5) break;


        printf("Enter number of processes: ");
        scanf("%d", &n);
        for (int i = 0; i < n; i++) {
            processes[i].id = i + 1;
            printf("Enter burst time for process P%d: ", i + 1);
            scanf("%d", &processes[i].burst_time);
            if (choice == 4) {
                printf("Enter priority for process P%d: ", i + 1);
                scanf("%d", &processes[i].priority);
            }
        }


        switch (choice) {
            case 1 :calculateWaitingTimeFCFS(processes, n);
                break;
            case 2:
                calculateWaitingTimeSJF(processes, n);
                break;
            case 3:
                printf("Enter time quantum for Round Robin: ");
                scanf("%d", &quantum);
                calculateWaitingTimeRR(processes, n, quantum);
                break;
            case 4:
                calculateWaitingTimePriority(processes, n);
                break;
            default:
                printf("Invalid choice. Please try again.\n");
                continue;
        }


        calculateAverageWaitingTime(processes, n);
        printGanttChart(processes, n);
    }


    return 0;
}

